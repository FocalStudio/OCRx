# include <stdio.h>
# include <stdlib.h>
# include "SDL/SDL.h"
# include "anothernn.h"
# include "rlsa.h"
# include "SDL_manip.h"
# include "pixel_operations.h"

int main() 
{

	int *sizes = malloc(sizeof(int) * 3);
	sizes[0] = 4;
	sizes[1] = 3;
	sizes[2] = 2;
	
	/*
	 *	1 = loading file
	 *	0 = creating new weight
	 */

	Network *net = create_network(sizes, 3, 0);

	double *input  = malloc(sizeof(double) * 2);

	int i = 0;

	/**
	 *	baka test matrix of 4
	 */

	double **t =  malloc(sizeof(double *) * 4);//{{0, 0}, {0, 1}, {1, 0}, {1, 1}};//malloc(sizeof(double *) * sizes[0]);
	double **e = malloc(sizeof(double *) * 4);//{{0}, {1}, {1}, {0}};//malloc(sizeof(double *) * sizes[2]);

	size_t data_len = 4;

	for (int i = 0; i < data_len; ++i) {
		t[i] = malloc(sizeof(double) * 2);		
		e[i] = malloc(sizeof(double) * 4); 		
	}

	e[0][0] = 0;
	e[0][1] = 0;	
	e[0][2] = 1;
	e[0][3] = 0;
	
	e[1][0] = 0;
	e[1][1] = 1;
	e[1][2] = 0;
	e[1][3] = 0;

	e[2][0] = 1;
	e[2][1] = 0;
	e[2][2] = 0;
	e[2][3] = 1;

	e[3][0] = 0;
	e[3][1] = 1;
	e[3][2] = 1;
	e[3][3] = 0;

/**
	e[4][0] = 0;
	e[4][1] = 1;
	e[4][2] = 0;
	e[4][3] = 1;*/

/*	e[0][0] = 0;
	e[0][1] = 1;
	e[0][2] = 0;
	e[0][3] = 1;
	e[0][4] = 0;
	e[0][5] = 1;
	e[0][6] = 0;
	e[0][7] = 1;

	e[1][0] = 0;
	e[1][1] = 1;
	e[1][2] = 0;
	e[1][3] = 1;
	e[1][4] = 0;
	e[1][5] = 1;
	e[1][6] = 0;
	e[1][7] = 1;

	e[2][0] = 0;
	e[2][1] = 1;
	e[2][2] = 0;
	e[2][3] = 1;
	e[2][4] = 0;
	e[2][5] = 1;
	e[2][6] = 0;
	e[2][7] = 1;

	e[3][0] = 0;
	e[3][1] = 1;
	e[3][2] = 0;
	e[3][3] = 1;
	e[3][4] = 0;
	e[3][5] = 1;
	e[3][6] = 0;
	e[3][7] = 1; */


	t[0][0] = 0;
	t[0][1] = 1;

	t[1][0] = 1; 
	t[1][1] = 0;
	
	t[2][0] = 1; 
	t[2][1] = 1;
	
	t[3][0] = 0; 
	t[3][1] = 0;

	SGD(net, 0.9, 0.3, e, 4, t, 100000000);

	/**
	 *	baka test matrix of 8
	 */
	/*
	   double **t =  malloc(sizeof(double *) * 4);//{{0, 0}, {0, 1}, {1, 0}, {1, 1}};//malloc(sizeof(double *) * sizes[0]);
	   double **e = malloc(sizeof(double *) * 4);//{{0}, {1}, {1}, {0}};//malloc(sizeof(double *) * sizes[2]);

	   size_t data_len = 4;

	   for (int i = 0; i < data_len; ++i) {
	   t[i] = malloc(sizeof(double) * 8);		
	   e[i] = malloc(sizeof(double) * 4); 		
	   }
	 */	

	//double **training_data = training_input();
	//double **training_results = training_result();

	//	SGD(net, 0.9, 0.3, training_data, 52, training_results, 1000000);
	/*	input[0] = 0;
		input[1] = 0;
		i = process(net, 0.9, 0.3, input, 2);
		printf("0, 0: %d\n", i);	
		input[0] = 0;
		input[1] = 1;
		i = process(net, 0.9, 0.3, input, 2);
		printf("0, 1: %d\n", i);
		input[0] = 1;
		input[1] = 0;
		i = process(net, 0.9, 0.3, input, 2);
		printf("1, 0: %d\n", i);
		input[0] = 1;
		input[1] = 1;
		i = process(net, 0.9, 0.3, input, 2);
		printf("0, 0: %d\n", i);
	//SGD(net, 10000000, 0.9, 0.3);
	 */

	/*	init_sdl();
		SDL_Surface *img = load_image("img/letter/A_bigletter_Arial.png");

		convert_BW(img);

		struct matrixBW *mat = convertPicBW(img);
	 */	return 0;
}
